# bot_multiuser.py - –ë–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, \
    CallbackQueryHandler
from database import MultiUserDatabase  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ë–î
from datetime import datetime, date, timedelta
import json
import os
import re
from config import TELEGRAM_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH=os.getenv("DATABASE_PATH", "shifts.db")
db=MultiUserDatabase(DB_PATH)

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger=logging.getLogger(__name__)

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ======
EMOJI={
    "date": "üóìÔ∏è",
    "role": "üõ†Ô∏è",
    "program": "üì∫",
    "time": "‚è±Ô∏è",
    "salary": "üí∞",
    "cancel": "‚ùå",
    "edit": "‚úèÔ∏è",
    "delete": "üóëÔ∏è",
    "success": "‚úÖ",
    "warning": "‚ö†Ô∏è",
    "info": "‚ÑπÔ∏è",
    "user": "üë§",
    "link": "üîó"
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_DATE, SELECT_ROLE, SELECT_PROGRAM, TYPING_START, TYPING_END, TYPING_SALARY=range(6)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫
ROLE_BUTTONS=[
    ["–†–ï–ñ", "–≠–ö–†–ê–ù–´", "EVS"],
    ["VMIX", "–û–ü–ï–†–ê–¢–û–†", "–û–ü–ï–†–ü–û–°–¢"],
    ["–°–í–ï–¢", "–ì–†–ò–ú", "–°–í–û–ô –í–ê–†–ò–ê–ù–¢"],
    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]
]

PROGRAM_BUTTONS=[
    ["–õ–ß", "–õ–ï", "–õ–ö"],
    ["–õ–ò–ì–ê 1", "–ë–£–ù–î–ï–°–õ–ò–ì–ê", "–ú–ú–ê"],
    ["–ö–£–ë–û–ì–ù–Ø", "–§–ò–ì–£–†–ö–ê", "–ë–ò–ê–¢–õ–û–ù"],
    ["–†–ü–õ", "LALIGA", "–¢–£–†–î–ï–§–†–ê–ù–°"],
    ["–°–í–û–ô –í–ê–†–ò–ê–ù–¢"],
    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]
]

NUM_PAD=[
    ["1", "2", "3"],
    ["4", "5", "6"],
    ["7", "8", "9"],
    [":", "0", "."],
    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"],
    ["‚ùå –û—Ç–º–µ–Ω–∞"]
]

NUM_PAD_SALARY=[
    ["1", "2", "3"],
    ["4", "5", "6"],
    ["7", "8", "9"],
    [".", "0", "–û—á–∏—Å—Ç–∏—Ç—å"],
    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"],
    ["‚ùå –û—Ç–º–µ–Ω–∞"]
]

SKIP_BUTTON=["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
CANCEL_BUTTON=["‚ùå –û—Ç–º–µ–Ω–∞"]
SKIP_AND_CANCEL=["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]


# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======

def validate_date(date_obj):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã"""
    if not date_obj:
        return True  # None –¥–æ–ø—É—Å—Ç–∏–º–æ

    today=date.today()
    # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–∞—Ç—ã –æ—Ç 1 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥ –¥–æ 1 –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥
    min_date=today - timedelta(days=365)
    max_date=today + timedelta(days=365)

    return min_date<=date_obj<=max_date


def validate_time(time_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not time_str:
        return True

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç HH:MM
        if ':' in time_str:
            hours, minutes=map(int, time_str.split(':'))
        else:
            # –§–æ—Ä–º–∞—Ç HHMM
            if len(time_str) == 4:
                hours=int(time_str[:2])
                minutes=int(time_str[2:])
            else:
                return False

        return 0<=hours<=23 and 0<=minutes<=59
    except (ValueError, IndexError):
        return False


def clean_time_input(time_str):
    """–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    if not time_str:
        return None

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    cleaned=re.sub(r'[^\d]', '', time_str)

    if len(cleaned) == 4:
        hours=cleaned[:2]
        minutes=cleaned[2:]
        return f"{hours}:{minutes}"
    elif len(cleaned) == 3:
        hours=f"0{cleaned[0]}"
        minutes=cleaned[1:]
        return f"{hours}:{minutes}"
    elif len(cleaned) == 2:
        hours=cleaned
        return f"{hours}:00"
    elif len(cleaned) == 1:
        hours=f"0{cleaned}"
        return f"{hours}:00"

    return None


def create_keyboard(buttons):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–Ω–æ–ø–æ–∫"""
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def format_shift_display(shift):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    lines=[]

    if shift.get("date"):
        lines.append(f"{EMOJI['date']} {shift['date'].strftime('%d.%m.%Y')}")

    if shift.get("role"):
        lines.append(f"{EMOJI['role']} {shift['role']}")

    if shift.get("program"):
        lines.append(f"{EMOJI['program']} {shift['program']}")

    if shift.get("start_time") and shift.get("end_time"):
        lines.append(f"{EMOJI['time']} {shift['start_time']}‚Äì{shift['end_time']}")
    elif shift.get("start_time"):
        lines.append(f"{EMOJI['time']} —Å {shift['start_time']}")
    elif shift.get("end_time"):
        lines.append(f"{EMOJI['time']} –¥–æ {shift['end_time']}")

    if shift.get("salary") is not None:
        lines.append(f"{EMOJI['salary']} {shift['salary']:,} ‚ÇΩ".replace(",", " "))

    return "\n".join(lines)


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è"""
    return ReplyKeyboardMarkup([
        ["–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", "–ú–æ–∏ —Å–º–µ–Ω—ã"],
        ["–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)


# ====== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ======

async def ensure_user_exists(update: Update) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    telegram_id=str(update.effective_user.id)
    username=update.effective_user.username
    full_name=update.effective_user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user=db.get_user_by_telegram_id(telegram_id)

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id=db.create_user_from_telegram(telegram_id, username, full_name)
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({full_name})")
        return user_id
    else:
        return user['user_id']


# ====== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_id=await ensure_user_exists(update)

    welcome_text=f"""
{EMOJI['success']} *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ —Å–º–µ–Ω!*

{EMOJI['user']} –¢–≤–æ–π ID: `{user_id}`

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–º–µ–Ω
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–º–µ–Ω
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
"""

    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞"""
    telegram_id=str(update.effective_user.id)
    user=db.get_user_by_telegram_id(telegram_id)

    if not user:
        user_id=await ensure_user_exists(update)
        user=db.get_user_by_telegram_id(telegram_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats=db.get_user_statistics(user['user_id'])

    profile_text=f"""
{EMOJI['user']} *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å*

*ID:* `{user['user_id']}`
*–ò–º—è:* {user['full_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
*Username:* @{user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {stats['total_shifts']}
‚Ä¢ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {stats['total_salary']:,} ‚ÇΩ

{EMOJI['link']} *–î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏:*
–¢–≤–æ–π —Ç–æ–∫–µ–Ω API: 
`{user['api_token']}`

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ.
_–ù–∞–∂–º–∏ –Ω–∞ —Ç–æ–∫–µ–Ω —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å_

‚ö†Ô∏è *–ù–µ –¥–µ–ª–∏—Å—å —Ç–æ–∫–µ–Ω–æ–º —Å –¥—Ä—É–≥–∏–º–∏!*
"""

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    buttons=InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", callback_data="regenerate_token")],
        [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")]
    ])

    await update.message.reply_text(
        profile_text.replace(",", " "),
        parse_mode='Markdown',
        reply_markup=buttons
    )


async def statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id=await ensure_user_exists(update)
    stats=db.get_user_statistics(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text=f"""
üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {stats['total_shifts']}
‚Ä¢ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {stats['total_salary']:,} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {stats['total_salary'] // max(stats['total_shifts'], 1):,} ‚ÇΩ

*–ü–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12):*
"""

    month_names={
        '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç',
        '04': '–ê–ø—Ä–µ–ª—å', '05': '–ú–∞–π', '06': '–ò—é–Ω—å',
        '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç', '09': '–°–µ–Ω—Ç—è–±—Ä—å',
        '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
    }

    for month_stat in stats['monthly_stats'][:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        year, month=month_stat['month'].split('-')
        month_name=month_names.get(month, month)
        stats_text+=f"\n‚Ä¢ {month_name} {year}: {month_stat['count']} —Å–º–µ–Ω, {month_stat['salary']:,} ‚ÇΩ"

    await update.message.reply_text(
        stats_text.replace(",", " "),
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –°–ú–ï–ù–´ ======

async def start_shift_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    try:
        await cleanup_messages(update, context)
        context.user_data.clear()

        date_buttons=[
            ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"],
            ["–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "–í—á–µ—Ä–∞"],
            ["–°–≤–æ—è –¥–∞—Ç–∞", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]

        msg=await update.message.reply_text(
            f"{EMOJI['date']} –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Å–º–µ–Ω—ã:",
            reply_markup=ReplyKeyboardMarkup(date_buttons, resize_keyboard=True)
        )

        context.user_data["to_delete"]=[msg.message_id]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã")
        return SELECT_DATE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_shift_creation: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END


async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        user_input=update.message.text.lower().strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if "‚ùå" in user_input or "–æ—Ç–º–µ–Ω–∞" in user_input:
            return await cancel(update, context)

        today=date.today()
        selected_date=None

        if "—Å–µ–≥–æ–¥–Ω—è" in user_input:
            selected_date=today
        elif "–∑–∞–≤—Ç—Ä–∞" in user_input:
            selected_date=today + timedelta(days=1)
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in user_input:
            selected_date=today + timedelta(days=2)
        elif "–≤—á–µ—Ä–∞" in user_input:
            selected_date=today - timedelta(days=1)
        elif "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in user_input:
            selected_date=None
        elif "—Å–≤–æ—è" in user_input:
            await update.message.reply_text(
                f"{EMOJI['info']} –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03 –∏–ª–∏ 1503",
                reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
            )
            return SELECT_DATE
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            cleaned=re.sub(r"[^\d]", "", user_input)
            if len(cleaned) == 4:
                try:
                    day, month=int(cleaned[:2]), int(cleaned[2:])
                    current_year=datetime.now().year
                    selected_date=date(current_year, month, day)

                    if not validate_date(selected_date):
                        await update.message.reply_text(
                            f"{EMOJI['warning']} –î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
                        )
                        return SELECT_DATE

                except ValueError:
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n"
                        "–ü—Ä–∏–º–µ—Ä: 15.03 –∏–ª–∏ 1503",
                        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
                    )
                    return SELECT_DATE
            else:
                await update.message.reply_text(
                    f"{EMOJI['warning']} –í–≤–µ–¥–∏ 4 —Ü–∏—Ñ—Ä—ã: –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü.\n"
                    "–ü—Ä–∏–º–µ—Ä: 1503 –¥–ª—è 15 –º–∞—Ä—Ç–∞",
                    reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
                )
                return SELECT_DATE

        context.user_data["date"]=selected_date

        msg=await update.message.reply_text(
            f"{EMOJI['role']} –í—ã–±–µ—Ä–∏ —Ä–æ–ª—å:",
            reply_markup=ReplyKeyboardMarkup(ROLE_BUTTONS, resize_keyboard=True)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return SELECT_ROLE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_date: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã."
        )
        return SELECT_DATE


async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    try:
        role=update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if "‚ùå" in role or "–æ—Ç–º–µ–Ω–∞" in role.lower():
            return await cancel(update, context)

        context.user_data["role"]=None if role.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else role

        msg=await update.message.reply_text(
            f"{EMOJI['program']} –í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:",
            reply_markup=ReplyKeyboardMarkup(PROGRAM_BUTTONS, resize_keyboard=True)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return SELECT_PROGRAM

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_role: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏."
        )
        return SELECT_ROLE


async def select_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        program=update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if "‚ùå" in program or "–æ—Ç–º–µ–Ω–∞" in program.lower():
            return await cancel(update, context)

        if program == "–°–í–û–ô –í–ê–†–ò–ê–ù–¢":
            await update.message.reply_text(
                f"{EMOJI['program']} –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
                reply_markup=ReplyKeyboardMarkup([SKIP_AND_CANCEL], resize_keyboard=True)
            )
            return SELECT_PROGRAM

        context.user_data["program"]=None if program.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else program

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        context.user_data["buffer"]=""
        context.user_data["typing"]="start"

        msg=await update.message.reply_text(
            f"{EMOJI['time']} –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 1830 –∏–ª–∏ 18:30",
            reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return TYPING_START

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_program: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã."
        )
        return SELECT_PROGRAM


async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        char=update.message.text.strip().lower()
        typing_type=context.user_data.get("typing", "start")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if "‚ùå" in char or "–æ—Ç–º–µ–Ω–∞" in char:
            return await cancel(update, context)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

        if char == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            return await skip_time_input(update, context, typing_type)

        if char == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            return await confirm_time_input(update, context, typing_type)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –∫ –±—É—Ñ–µ—Ä—É
        context.user_data["buffer"]+=char
        clean_buffer=re.sub(r"[^\d]", "", context.user_data["buffer"])

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 4 —Ü–∏—Ñ—Ä
        if len(clean_buffer)>=4:
            return await confirm_time_input(update, context, typing_type)

        return TYPING_START if typing_type == "start" else TYPING_END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_time_input: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏."
        )
        return TYPING_START if context.user_data.get("typing") == "start" else TYPING_END


async def skip_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, typing_type: str):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    context.user_data[f"{typing_type}_time"]=None
    context.user_data["buffer"]=""

    if typing_type == "start":
        context.user_data["typing"]="end"
        msg=await update.message.reply_text(
            f"{EMOJI['time']} –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú):",
            reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return TYPING_END
    else:
        return await prompt_salary(update, context)


async def confirm_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, typing_type: str):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time_str=clean_time_input(context.user_data.get("buffer", ""))

    if time_str and validate_time(time_str):
        context.user_data[f"{typing_type}_time"]=time_str
        context.user_data["buffer"]=""

        if typing_type == "start":
            context.user_data["typing"]="end"
            msg=await update.message.reply_text(
                f"{EMOJI['time']} –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú):",
                reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
            )
            context.user_data["to_delete"].append(msg.message_id)
            return TYPING_END
        else:
            return await prompt_salary(update, context)
    else:
        await update.message.reply_text(
            f"{EMOJI['warning']} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: 1830 –∏–ª–∏ 18:30",
            reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
        )
        context.user_data["buffer"]=""
        return TYPING_START if typing_type == "start" else TYPING_END


async def prompt_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    context.user_data["salary_buffer"]=""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, —á—Ç–æ–±—ã –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    msg=await update.message.reply_text(
        f"{EMOJI['salary']} –í–≤–µ–¥–∏ –≥–æ–Ω–æ—Ä–∞—Ä –≤ —Ä—É–±–ª—è—Ö:\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
        reply_markup=ReplyKeyboardMarkup(NUM_PAD_SALARY, resize_keyboard=True)
    )
    context.user_data["salary_message_id"]=msg.message_id
    return TYPING_SALARY


async def enter_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    try:
        text=update.message.text.strip().lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if "‚ùå" in text or "–æ—Ç–º–µ–Ω–∞" in text:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await safe_delete_message(context, update.effective_chat.id, update.message.message_id)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if "salary_message_id" in context.user_data:
                await safe_delete_message(context, update.effective_chat.id, context.user_data["salary_message_id"])
            return await cancel(update, context)

        # –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        if text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
            await safe_delete_message(context, update.effective_chat.id, update.message.message_id)
            if "salary_message_id" in context.user_data:
                await safe_delete_message(context, update.effective_chat.id, context.user_data["salary_message_id"])
            context.user_data["salary"]=None
            return await save_shift_data(update, context)

        if text == "–æ—á–∏—Å—Ç–∏—Ç—å":
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            context.user_data["salary_buffer"]=""
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—á–∏—Å—Ç–∫–∏
            await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "salary_message_id" in context.user_data:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data["salary_message_id"],
                        text=f"{EMOJI['salary']} –í–≤–µ–¥–∏ –≥–æ–Ω–æ—Ä–∞—Ä –≤ —Ä—É–±–ª—è—Ö:\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
                    )
                except:
                    pass
            return TYPING_SALARY

        if text == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
            buffer_value=context.user_data.get("salary_buffer", "")
            if buffer_value:
                try:
                    value=int(buffer_value)
                    if value<0:
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                        await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                        if "salary_message_id" in context.user_data:
                            try:
                                await context.bot.edit_message_text(
                                    chat_id=update.effective_chat.id,
                                    message_id=context.user_data["salary_message_id"],
                                    text=f"{EMOJI['warning']} –ì–æ–Ω–æ—Ä–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.\n"
                                         "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:"
                                )
                            except:
                                pass
                        context.user_data["salary_buffer"]=""
                        return TYPING_SALARY

                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                    await safe_delete_message(context, update.effective_chat.id, update.message.message_id)
                    if "salary_message_id" in context.user_data:
                        await safe_delete_message(context, update.effective_chat.id,
                                                  context.user_data["salary_message_id"])

                    context.user_data["salary"]=value
                    return await save_shift_data(update, context)
                except ValueError:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                    await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                    if "salary_message_id" in context.user_data:
                        try:
                            await context.bot.edit_message_text(
                                chat_id=update.effective_chat.id,
                                message_id=context.user_data["salary_message_id"],
                                text=f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
                                     "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
                            )
                        except:
                            pass
                    context.user_data["salary_buffer"]=""
                    return TYPING_SALARY
            else:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if "salary_message_id" in context.user_data:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=update.effective_chat.id,
                            message_id=context.user_data["salary_message_id"],
                            text=f"{EMOJI['warning']} –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
                        )
                    except:
                        pass
                return TYPING_SALARY

        # –ï—Å–ª–∏ —ç—Ç–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ç–æ—á–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±—É—Ñ–µ—Ä—É
        if text in ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "."]:
            if "salary_buffer" not in context.user_data:
                context.user_data["salary_buffer"]=""

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–æ–π
            await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

            context.user_data["salary_buffer"]+=text

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Å—É–º–º–æ–π
            current_value=context.user_data["salary_buffer"]
            if "salary_message_id" in context.user_data:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data["salary_message_id"],
                        text=f"{EMOJI['salary']} –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {current_value} ‚ÇΩ\n"
                             f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    msg=await update.message.reply_text(
                        f"{EMOJI['salary']} –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {current_value} ‚ÇΩ\n"
                        f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
                    )
                    context.user_data["salary_message_id"]=msg.message_id
            return TYPING_SALARY

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ —Ü–∏—Ñ—Ä–∞, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏/–∑–∞–ø—è—Ç–æ–π
            cleaned_text=re.sub(r'[^\d.,]', '', text)
            value=float(cleaned_text.replace(",", "."))

            if value<0:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if "salary_message_id" in context.user_data:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=update.effective_chat.id,
                            message_id=context.user_data["salary_message_id"],
                            text=f"{EMOJI['warning']} –ì–æ–Ω–æ—Ä–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.\n"
                                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
                        )
                    except:
                        pass
                return TYPING_SALARY

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–≤–æ–¥–µ
            await safe_delete_message(context, update.effective_chat.id, update.message.message_id)
            if "salary_message_id" in context.user_data:
                await safe_delete_message(context, update.effective_chat.id, context.user_data["salary_message_id"])

            context.user_data["salary"]=int(value)
            return await save_shift_data(update, context)

        except ValueError:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "salary_message_id" in context.user_data:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data["salary_message_id"],
                        text=f"{EMOJI['warning']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
                    )
                except:
                    pass
            return TYPING_SALARY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ enter_salary: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—Ä–ø–ª–∞—Ç—ã."
        )
        return TYPING_SALARY


async def save_shift_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id=await ensure_user_exists(update)

        shift_data={
            "date": context.user_data.get("date"),
            "role": context.user_data.get("role"),
            "program": context.user_data.get("program"),
            "start_time": context.user_data.get("start_time"),
            "end_time": context.user_data.get("end_time"),
            "salary": context.user_data.get("salary"),
        }

        if db.add_shift(user_id, shift_data):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—É
            formatted_text=format_shift_display(shift_data)
            await update.message.reply_text(formatted_text)

            await update.message.reply_text(
                f"{EMOJI['success']} –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_shift_data: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–°–ú–û–¢–†–ê –°–ú–ï–ù ======

async def list_shifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
        month_buttons=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data="month_1"),
                InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å", callback_data="month_2"),
                InlineKeyboardButton("–ú–∞—Ä—Ç", callback_data="month_3")
            ],
            [
                InlineKeyboardButton("–ê–ø—Ä–µ–ª—å", callback_data="month_4"),
                InlineKeyboardButton("–ú–∞–π", callback_data="month_5"),
                InlineKeyboardButton("–ò—é–Ω—å", callback_data="month_6")
            ],
            [
                InlineKeyboardButton("–ò—é–ª—å", callback_data="month_7"),
                InlineKeyboardButton("–ê–≤–≥—É—Å—Ç", callback_data="month_8"),
                InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å", callback_data="month_9")
            ],
            [
                InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å", callback_data="month_10"),
                InlineKeyboardButton("–ù–æ—è–±—Ä—å", callback_data="month_11"),
                InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å", callback_data="month_12")
            ],
            [
                InlineKeyboardButton("–í—Å–µ —Å–º–µ–Ω—ã", callback_data="month_all")
            ]
        ])

        await update.message.reply_text(
            f"{EMOJI['date']} –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω:",
            reply_markup=month_buttons
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_shifts: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )


async def show_shifts_by_month(update: Update, context: ContextTypes.DEFAULT_TYPE, month: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–º–µ–Ω—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≤—Å–µ —Å–º–µ–Ω—ã"""
    try:
        query=update.callback_query
        user_id=await ensure_user_exists(update)
        shifts=db.get_user_shifts(user_id)

        if not shifts:
            await query.edit_message_text(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
                ]])
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –º–µ—Å—è—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if month is not None:
            current_year=datetime.now().year
            filtered_shifts=[]
            for shift in shifts:
                if shift.get("date") and shift["date"].month == month and shift["date"].year == current_year:
                    filtered_shifts.append(shift)
            shifts=filtered_shifts

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—ã: —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É
        if shifts:
            shifts.sort(key=lambda s: (
                s.get("date") or date.min,  # –°–Ω–∞—á–∞–ª–∞ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É)
                s.get("start_time") or "00:00"  # –ü–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω–Ω–µ–µ —Å–≤–µ—Ä—Ö—É)
            ))

        if not shifts:
            month_names={
                1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
                5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
                9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
            }
            month_name=month_names.get(month, "–≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü")

            await query.edit_message_text(
                f"–£ —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω –∑–∞ {month_name}.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
                ]])
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if month is not None:
            month_names={
                1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
                5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
                9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
            }
            header=f"üìÖ –°–º–µ–Ω—ã –∑–∞ {month_names[month]} {datetime.now().year}\n\n"
        else:
            header="üìÖ –í—Å–µ —Ç–≤–æ–∏ —Å–º–µ–Ω—ã:\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        await query.edit_message_text(
            header.strip(),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
            ]])
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—ã
        for shift in shifts:
            formatted_text=format_shift_display(shift)

            buttons=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{shift['id']}"),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{shift['id']}")
                ]
            ])

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=formatted_text if formatted_text else "–°–º–µ–Ω–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=buttons
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_shifts_by_month: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–º–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
            ]])
        )


# ====== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ======

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id=await ensure_user_exists(update)
        shifts=db.get_user_shifts(user_id)

        if not shifts:
            await update.message.reply_text(
                f"{EMOJI['info']} –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        telegram_id=str(update.effective_user.id)
        user=db.get_user_by_telegram_id(telegram_id)

        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        export_data_dict={
            "user_id": user_id,
            "api_token": user['api_token'],
            "export_date": datetime.now().isoformat(),
            "web_access": f"–ò—Å–ø–æ–ª—å–∑—É–π api_token –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏",
            "shifts": []
        }

        for shift in shifts:
            shift_export={
                "date": shift['date'].isoformat() if shift['date'] else None,
                "role": shift['role'],
                "program": shift['program'],
                "start_time": shift['start_time'],
                "end_time": shift['end_time'],
                "salary": shift['salary']
            }
            export_data_dict["shifts"].append(shift_export)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename=f"shifts_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data_dict, f, ensure_ascii=False, indent=2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as f:
            await update.message.reply_document(
                document=f,
                caption=f"{EMOJI['success']} –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö\n"
                        f"{EMOJI['link']} –¢–≤–æ–π API —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞",
                reply_markup=get_main_menu_keyboard()
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_data: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu_keyboard()
        )


# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======

async def safe_delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")


async def cleanup_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if "to_delete" not in context.user_data:
        return

    for msg_id in context.user_data["to_delete"]:
        await safe_delete_message(context, update.effective_chat.id, msg_id)

    context.user_data["to_delete"]=[]


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text=f"""
{EMOJI['info']} *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É
‚Ä¢ –ú–æ–∏ —Å–º–µ–Ω—ã - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–º–µ–Ω—ã
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏ API —Ç–æ–∫–µ–Ω
‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É:*
1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É
4. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
5. –£–∫–∞–∂–∏—Ç–µ –≥–æ–Ω–æ—Ä–∞—Ä

*–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:*
‚Ä¢ –í—Ä–µ–º—è: 1830 –∏–ª–∏ 18:30
‚Ä¢ –î–∞—Ç–∞: 1503 –¥–ª—è 15.03
‚Ä¢ –ì–æ–Ω–æ—Ä–∞—Ä: –≤ —Ä—É–±–ª—è—Ö (10000 –∏–ª–∏ 7500)

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏:*
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –ø–æ–ª–µ
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–∏—Ç—å —Å–º–µ–Ω—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç - —Å–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

‚ùå *–ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"* –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @username
"""

    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ======

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
    try:
        query=update.callback_query
        await query.answer()

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")

        user_id=await ensure_user_exists(update)
        data=query.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
        if data.startswith("month_"):
            if data == "month_all":
                await show_shifts_by_month(update, context, month=None)
            else:
                month=int(data.split("_")[1])
                await show_shifts_by_month(update, context, month=month)
            return

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –º–µ—Å—è—Ü–µ–≤
        elif data == "back_to_months":
            month_buttons=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data="month_1"),
                    InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å", callback_data="month_2"),
                    InlineKeyboardButton("–ú–∞—Ä—Ç", callback_data="month_3")
                ],
                [
                    InlineKeyboardButton("–ê–ø—Ä–µ–ª—å", callback_data="month_4"),
                    InlineKeyboardButton("–ú–∞–π", callback_data="month_5"),
                    InlineKeyboardButton("–ò—é–Ω—å", callback_data="month_6")
                ],
                [
                    InlineKeyboardButton("–ò—é–ª—å", callback_data="month_7"),
                    InlineKeyboardButton("–ê–≤–≥—É—Å—Ç", callback_data="month_8"),
                    InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å", callback_data="month_9")
                ],
                [
                    InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å", callback_data="month_10"),
                    InlineKeyboardButton("–ù–æ—è–±—Ä—å", callback_data="month_11"),
                    InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å", callback_data="month_12")
                ],
                [
                    InlineKeyboardButton("–í—Å–µ —Å–º–µ–Ω—ã", callback_data="month_all")
                ]
            ])

            await query.edit_message_text(
                f"{EMOJI['date']} –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω:",
                reply_markup=month_buttons
            )
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã
        elif data.startswith("delete_"):
            shift_id=int(data.split("_")[1])

            if db.delete_shift(user_id, shift_id):
                await query.edit_message_text(f"{EMOJI['success']} –°–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞.")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–º–µ–Ω—É {shift_id}")
            else:
                await query.edit_message_text(f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.")

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã (–æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        elif re.fullmatch(r"edit_\d+", data):  # –¢–æ–ª—å–∫–æ edit_—á–∏—Å–ª–æ
            shift_id=int(data.split("_")[1])

            shifts=db.get_user_shifts(user_id)
            shift=next((s for s in shifts if s['id'] == shift_id), None)

            if not shift:
                await query.edit_message_text(f"{EMOJI['warning']} –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            edit_buttons=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_field_{shift_id}_date")],
                [InlineKeyboardButton("üõ†Ô∏è –†–æ–ª—å", callback_data=f"edit_field_{shift_id}_role")],
                [InlineKeyboardButton("üì∫ –ü—Ä–æ–≥—Ä–∞–º–º–∞", callback_data=f"edit_field_{shift_id}_program")],
                [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", callback_data=f"edit_field_{shift_id}_start_time")],
                [InlineKeyboardButton("‚è±Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data=f"edit_field_{shift_id}_end_time")],
                [InlineKeyboardButton("üí∞ –ì–æ–Ω–æ—Ä–∞—Ä", callback_data=f"edit_field_{shift_id}_salary")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{shift_id}")]
            ])

            await query.edit_message_text(
                f"–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–º–µ–Ω–µ?\n\n{format_shift_display(shift)}",
                reply_markup=edit_buttons
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è (edit_field_...)
        elif data.startswith("edit_field_"):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ edit_field_: {data}")

            match=re.match(r"edit_field_(\d+)_(\w+)", data)
            if not match:
                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.")
                return

            shift_id=int(match.group(1))
            field=match.group(2)

            logger.debug(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É ID {shift_id}, –ø–æ–ª–µ {field}")

            context.user_data["edit_shift_id"]=shift_id
            context.user_data["edit_field"]=field

            field_names={
                "date": "–¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –î–î–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1503)",
                "role": "—Ä–æ–ª—å",
                "program": "–ø—Ä–æ–≥—Ä–∞–º–º—É",
                "start_time": "–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ß–ß–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1830)",
                "end_time": "–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2100)",
                "salary": "–≥–æ–Ω–æ—Ä–∞—Ä –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 –∏–ª–∏ 7500)"
            }

            await query.edit_message_text(
                f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´{field_names.get(field, field)}¬ª:\n\n"
                f"–í–≤–µ–¥–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ."
            )

        # –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        elif data.startswith("cancel_edit_"):
            shift_id=int(data.split("_")[2])
            shifts=db.get_user_shifts(user_id)
            shift=next((s for s in shifts if s['id'] == shift_id), None)

            if shift:
                await query.edit_message_text(format_shift_display(shift))
            else:
                await query.edit_message_text("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
        elif data == "regenerate_token":
            new_token=db.regenerate_api_token(user_id)
            if new_token:
                await query.edit_message_text(
                    f"{EMOJI['success']} –ù–æ–≤—ã–π API —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:\n\n`{new_token}`\n\n"
                    f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞.")

        elif data == "detailed_stats":
            stats=db.get_user_statistics(user_id)

            stats_text=f"""
üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {stats['total_shifts']}
‚Ä¢ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {stats['total_salary']:,} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–º–µ–Ω—É: {stats['total_salary'] // max(stats['total_shifts'], 1):,} ‚ÇΩ

*–ü–æ –º–µ—Å—è—Ü–∞–º:*
"""

            month_names={
                '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç',
                '04': '–ê–ø—Ä–µ–ª—å', '05': '–ú–∞–π', '06': '–ò—é–Ω—å',
                '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç', '09': '–°–µ–Ω—Ç—è–±—Ä—å',
                '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
            }

            for month_stat in stats['monthly_stats']:
                year, month=month_stat['month'].split('-')
                month_name=month_names.get(month, month)
                stats_text+=f"\n‚Ä¢ {month_name} {year}: {month_stat['count']} —Å–º–µ–Ω, {month_stat['salary']:,} ‚ÇΩ"

            await query.edit_message_text(
                stats_text.replace(",", " "),
                parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text(f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏.")


async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        if "edit_shift_id" not in context.user_data or "edit_field" not in context.user_data:
            return

        shift_id=context.user_data["edit_shift_id"]
        field=context.user_data["edit_field"]
        user_id=await ensure_user_exists(update)
        new_value=update.message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if field == "date":
            if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                processed_value=None
            else:
                try:
                    cleaned=re.sub(r"[^\d]", "", new_value)
                    if len(cleaned) == 4:
                        day, month=int(cleaned[:2]), int(cleaned[2:])
                        processed_value=date(datetime.now().year, month, day)

                        if not validate_date(processed_value):
                            await update.message.reply_text(
                                f"{EMOJI['warning']} –î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –±—É–¥—É—â–µ–º."
                            )
                            return
                    else:
                        await update.message.reply_text(
                            f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1503)."
                        )
                        return
                except ValueError:
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞."
                    )
                    return

        elif field in ["start_time", "end_time"]:
            if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                processed_value=None
            else:
                processed_value=clean_time_input(new_value)
                if processed_value and not validate_time(processed_value):
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1830)."
                    )
                    return

        elif field == "salary":
            if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                processed_value=None
            else:
                try:
                    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏/–∑–∞–ø—è—Ç–æ–π
                    cleaned_text=re.sub(r'[^\d.,]', '', new_value)
                    value=float(cleaned_text.replace(",", "."))
                    if value<0:
                        await update.message.reply_text(
                            f"{EMOJI['warning']} –ì–æ–Ω–æ—Ä–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º."
                        )
                        return
                    processed_value=int(value)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
                except ValueError:
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 –∏–ª–∏ 7500)."
                    )
                    return

        else:  # role, program
            processed_value=None if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else new_value

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if db.update_shift(user_id, shift_id, field, processed_value):
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
            shifts=db.get_user_shifts(user_id)
            updated_shift=next((s for s in shifts if s['id'] == shift_id), None)

            if updated_shift:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                formatted_text=format_shift_display(updated_shift)

                edit_buttons=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –µ—â–µ", callback_data=f"edit_{shift_id}"),
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{shift_id}")
                    ]
                ])

                await update.message.reply_text(
                    f"{EMOJI['success']} –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{formatted_text}",
                    reply_markup=edit_buttons
                )
            else:
                await update.message.reply_text(
                    f"{EMOJI['success']} –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await update.message.reply_text(
                f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.",
                reply_markup=get_main_menu_keyboard()
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop("edit_shift_id", None)
        context.user_data.pop("edit_field", None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_input: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        await cleanup_messages(update, context)
        await update.message.reply_text(
            f"{EMOJI['cancel']} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        return ConversationHandler.END


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        text=update.message.text

        if text == "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É":
            return await start_shift_creation(update, context)
        elif text == "–ú–æ–∏ —Å–º–µ–Ω—ã":
            await list_shifts(update, context)
        elif text == "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö":
            await export_data(update, context)
        elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await statistics_command(update, context)
        elif text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "–ü—Ä–æ—Ñ–∏–ª—å"]:
            await profile_command(update, context)
        elif text == "–ü–æ–º–æ—â—å":
            await help_command(update, context)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if "edit_shift_id" in context.user_data and "edit_field" in context.user_data:
                await handle_edit_input(update, context)
            else:
                await update.message.reply_text(
                    f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                    reply_markup=get_main_menu_keyboard()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_buttons: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

    if update and update.effective_message:
        await update.effective_message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application=ApplicationBuilder().token(TELEGRAM_TOKEN).build()

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã
        conv_handler=ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex(r'^–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É'), start_shift_creation)
            ],
            states={
                SELECT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_date)],
                SELECT_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_role)],
                SELECT_PROGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_program)],
                TYPING_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_input)],
                TYPING_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_input)],
                TYPING_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_salary)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫ –æ–±—â–∏–º)

        # 1. –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel))
        application.add_handler(CommandHandler("profile", profile_command))

        # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
        application.add_handler(conv_handler)

        # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))

        # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_menu_buttons
        ))

        # 5. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        print(f"{EMOJI['success']} –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == "__main__":
    main()