import logging
import sqlite3
import json
import os
from datetime import datetime, date, timedelta
from typing import Optional, Dict, Any, List
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes, CallbackQueryHandler
)
import re
from config import TELEGRAM_TOKEN

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger=logging.getLogger(__name__)

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ======
EMOJI={
    "date": "üóìÔ∏è",
    "role": "üõ†Ô∏è",
    "program": "üì∫",
    "time": "‚è±Ô∏è",
    "salary": "üí∞",
    "cancel": "‚ùå",
    "edit": "‚úèÔ∏è",
    "delete": "üóëÔ∏è",
    "success": "‚úÖ",
    "warning": "‚ö†Ô∏è",
    "info": "‚ÑπÔ∏è"
}

NUM_PAD=[
    ["1", "2", "3"],
    ["4", "5", "6"],
    ["7", "8", "9"],
    [":", "0", "."],
    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]
]

SKIP_BUTTON=["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
ROLE_BUTTONS=["–†–ï–ñ", "–≠–ö–†–ê–ù–´", "EVS", "VMIX", "–û–ü–ï–†–ê–¢–û–†", "–û–ü–ï–†–ü–û–°–¢", "–°–í–ï–¢", "–ì–†–ò–ú"]
PROGRAM_BUTTONS=[
    "–õ–ß", "–õ–ï", "–õ–ö", "–õ–ò–ì–ê 1", "–ë–£–ù–î–ï–°–õ–ò–ì–ê", "–ú–ú–ê",
    "–ö–£–ë–û–ì–ù–Ø", "–§–ò–ì–£–†–ö–ê", "–ë–ò–ê–¢–õ–û–ù", "–†–ü–õ", "LALIGA", "–¢–£–†–î–ï–§–†–ê–ù–°",
    "–°–í–û–ô –í–ê–†–ò–ê–ù–¢"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_DATE, SELECT_ROLE, SELECT_PROGRAM, TYPING_START, TYPING_END, TYPING_SALARY=range(6)


# ====== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ======
class ShiftDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω"""

    def __init__(self, db_path: str = "shifts.db"):
        self.db_path=db_path
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS shifts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id TEXT NOT NULL,
                        date TEXT,
                        role TEXT,
                        program TEXT,
                        start_time TEXT,
                        end_time TEXT,
                        salary INTEGER,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise

    def add_shift(self, user_id: str, shift_data: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute('''
                    INSERT INTO shifts (user_id, date, role, program, start_time, end_time, salary)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_id,
                    shift_data.get('date').isoformat() if shift_data.get('date') else None,
                    shift_data.get('role'),
                    shift_data.get('program'),
                    shift_data.get('start_time'),
                    shift_data.get('end_time'),
                    shift_data.get('salary')
                ))
                conn.commit()
            logger.info(f"–°–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
            return False

    def get_user_shifts(self, user_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor=conn.execute('''
                    SELECT id, date, role, program, start_time, end_time, salary
                    FROM shifts WHERE user_id = ?
                    ORDER BY date DESC, start_time DESC
                ''', (user_id,))

                shifts=[]
                for row in cursor.fetchall():
                    shift={
                        'id': row[0],
                        'date': datetime.fromisoformat(row[1]).date() if row[1] else None,
                        'role': row[2],
                        'program': row[3],
                        'start_time': row[4],
                        'end_time': row[5],
                        'salary': row[6]
                    }
                    shifts.append(shift)
                return shifts
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ–Ω: {e}")
            return []

    def delete_shift(self, user_id: str, shift_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor=conn.execute('''
                    DELETE FROM shifts WHERE id = ? AND user_id = ?
                ''', (shift_id, user_id))
                conn.commit()
                return cursor.rowcount>0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
            return False

    def update_shift(self, user_id: str, shift_id: int, field: str, value: Any) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —Å–º–µ–Ω—ã"""
        try:
            if field == 'date' and value:
                value=value.isoformat()

            with sqlite3.connect(self.db_path) as conn:
                conn.execute(f'''
                    UPDATE shifts SET {field} = ? WHERE id = ? AND user_id = ?
                ''', (value, shift_id, user_id))
                conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
            return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db=ShiftDatabase()


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======
def create_keyboard(buttons: List[str], row_width: int = 3, skip_button: bool = True) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–Ω–æ–ø–æ–∫"""
    keyboard=[buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
    if skip_button:
        keyboard.append(SKIP_BUTTON)
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


def clean_time_input(text: str) -> Optional[str]:
    """–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    if not text:
        return None

    digits=re.sub(r"[^\d]", "", text)
    if len(digits) == 4:
        return f"{digits[:2]}:{digits[2:]}"
    return None


def validate_time(time_str: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    if not time_str:
        return False

    try:
        hours, minutes=map(int, time_str.split(':'))
        return 0<=hours<24 and 0<=minutes<60
    except (ValueError, AttributeError):
        return False


def validate_date(date_obj: date) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã (–Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –±—É–¥—É—â–µ–º)"""
    if not date_obj:
        return True

    today=date.today()
    # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥ –¥–æ 1 –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥
    min_date=today - timedelta(days=365)
    max_date=today + timedelta(days=365)

    return min_date<=date_obj<=max_date


def format_shift_display(shift: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    lines=[]

    if shift.get("date"):
        lines.append(f"{EMOJI['date']} {shift['date'].strftime('%d.%m.%Y')}")

    if shift.get("role"):
        lines.append(f"{EMOJI['role']} {shift['role']}")

    if shift.get("program"):
        lines.append(f"{EMOJI['program']} {shift['program']}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if shift.get("start_time") and shift.get("end_time"):
        lines.append(f"{EMOJI['time']} {shift['start_time']}‚Äì{shift['end_time']}")
    elif shift.get("start_time"):
        lines.append(f"{EMOJI['time']} —Å {shift['start_time']}")
    elif shift.get("end_time"):
        lines.append(f"{EMOJI['time']} –¥–æ {shift['end_time']}")

    if shift.get("salary") is not None:
        lines.append(f"{EMOJI['salary']} {shift['salary']:,} ‚ÇΩ".replace(",", " "))

    return "\n".join(lines)


async def safe_delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")


async def cleanup_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if "to_delete" not in context.user_data:
        return

    for msg_id in context.user_data["to_delete"]:
        await safe_delete_message(context, update.effective_chat.id, msg_id)

    context.user_data["to_delete"]=[]


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup([
        ["–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", "–ú–æ–∏ —Å–º–µ–Ω—ã"],
        ["–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)


# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ======
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    welcome_text=f"""
{EMOJI['success']} *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ —Å–º–µ–Ω!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–º–µ–Ω
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–º–µ–Ω
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
"""

    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )


async def start_shift_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    try:
        await cleanup_messages(update, context)
        context.user_data.clear()

        date_buttons=[
            ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"],
            ["–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "–í—á–µ—Ä–∞"],
            ["–°–≤–æ—è –¥–∞—Ç–∞", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
        ]

        msg=await update.message.reply_text(
            f"{EMOJI['date']} –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Å–º–µ–Ω—ã:",
            reply_markup=ReplyKeyboardMarkup(date_buttons, resize_keyboard=True)
        )

        context.user_data["to_delete"]=[msg.message_id]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã")
        return SELECT_DATE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_shift_creation: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END


async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        user_input=update.message.text.lower().strip()
        today=date.today()
        selected_date=None

        if "—Å–µ–≥–æ–¥–Ω—è" in user_input:
            selected_date=today
        elif "–∑–∞–≤—Ç—Ä–∞" in user_input:
            selected_date=today + timedelta(days=1)
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in user_input:
            selected_date=today + timedelta(days=2)
        elif "–≤—á–µ—Ä–∞" in user_input:
            selected_date=today - timedelta(days=1)
        elif "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in user_input:
            selected_date=None
        elif "—Å–≤–æ—è" in user_input:
            await update.message.reply_text(
                f"{EMOJI['info']} –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03 –∏–ª–∏ 1503"
            )
            return SELECT_DATE
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            cleaned=re.sub(r"[^\d]", "", user_input)
            if len(cleaned) == 4:
                try:
                    day, month=int(cleaned[:2]), int(cleaned[2:])
                    current_year=datetime.now().year
                    selected_date=date(current_year, month, day)

                    if not validate_date(selected_date):
                        await update.message.reply_text(
                            f"{EMOJI['warning']} –î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
                        )
                        return SELECT_DATE

                except ValueError:
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n"
                        "–ü—Ä–∏–º–µ—Ä: 15.03 –∏–ª–∏ 1503"
                    )
                    return SELECT_DATE
            else:
                await update.message.reply_text(
                    f"{EMOJI['warning']} –í–≤–µ–¥–∏ 4 —Ü–∏—Ñ—Ä—ã: –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü.\n"
                    "–ü—Ä–∏–º–µ—Ä: 1503 –¥–ª—è 15 –º–∞—Ä—Ç–∞"
                )
                return SELECT_DATE

        context.user_data["date"]=selected_date

        msg=await update.message.reply_text(
            f"{EMOJI['role']} –í—ã–±–µ—Ä–∏ —Ä–æ–ª—å:",
            reply_markup=create_keyboard(ROLE_BUTTONS)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return SELECT_ROLE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_date: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã."
        )
        return SELECT_DATE


async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    try:
        role=update.message.text.strip()
        context.user_data["role"]=None if role.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else role

        msg=await update.message.reply_text(
            f"{EMOJI['program']} –í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:",
            reply_markup=create_keyboard(PROGRAM_BUTTONS)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return SELECT_PROGRAM

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_role: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏."
        )
        return SELECT_ROLE


async def select_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        program=update.message.text.strip()

        if program == "–°–í–û–ô –í–ê–†–ò–ê–ù–¢":
            await update.message.reply_text(
                f"{EMOJI['program']} –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
                reply_markup=ReplyKeyboardMarkup([SKIP_BUTTON], resize_keyboard=True)
            )
            return SELECT_PROGRAM

        context.user_data["program"]=None if program.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else program

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        context.user_data["buffer"]=""
        context.user_data["typing"]="start"

        msg=await update.message.reply_text(
            f"{EMOJI['time']} –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 1830 –∏–ª–∏ 18:30",
            reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return TYPING_START

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_program: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã."
        )
        return SELECT_PROGRAM


async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        char=update.message.text.strip().lower()
        typing_type=context.user_data.get("typing", "start")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        await safe_delete_message(context, update.effective_chat.id, update.message.message_id)

        if char == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            return await skip_time_input(update, context, typing_type)

        if char == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            return await confirm_time_input(update, context, typing_type)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –∫ –±—É—Ñ–µ—Ä—É
        context.user_data["buffer"]+=char
        clean_buffer=re.sub(r"[^\d]", "", context.user_data["buffer"])

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 4 —Ü–∏—Ñ—Ä
        if len(clean_buffer)>=4:
            return await confirm_time_input(update, context, typing_type)

        return TYPING_START if typing_type == "start" else TYPING_END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_time_input: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏."
        )
        return TYPING_START if context.user_data.get("typing") == "start" else TYPING_END


async def skip_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, typing_type: str):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    context.user_data[f"{typing_type}_time"]=None
    context.user_data["buffer"]=""

    if typing_type == "start":
        context.user_data["typing"]="end"
        msg=await update.message.reply_text(
            f"{EMOJI['time']} –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú):",
            reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
        )
        context.user_data["to_delete"].append(msg.message_id)
        return TYPING_END
    else:
        return await prompt_salary(update, context)


async def confirm_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE, typing_type: str):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time_str=clean_time_input(context.user_data.get("buffer", ""))

    if time_str and validate_time(time_str):
        context.user_data[f"{typing_type}_time"]=time_str
        context.user_data["buffer"]=""

        if typing_type == "start":
            context.user_data["typing"]="end"
            msg=await update.message.reply_text(
                f"{EMOJI['time']} –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú):",
                reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
            )
            context.user_data["to_delete"].append(msg.message_id)
            return TYPING_END
        else:
            return await prompt_salary(update, context)
    else:
        await update.message.reply_text(
            f"{EMOJI['warning']} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: 1830 –∏–ª–∏ 18:30",
            reply_markup=ReplyKeyboardMarkup(NUM_PAD, resize_keyboard=True)
        )
        context.user_data["buffer"]=""
        return TYPING_START if typing_type == "start" else TYPING_END


async def prompt_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    msg=await update.message.reply_text(
        f"{EMOJI['salary']} –í–≤–µ–¥–∏ –≥–æ–Ω–æ—Ä–∞—Ä –≤ —Ä—É–±–ª—è—Ö:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 10000 –∏–ª–∏ 7500",
        reply_markup=ReplyKeyboardMarkup([SKIP_BUTTON], resize_keyboard=True)
    )
    context.user_data["to_delete"].append(msg.message_id)
    return TYPING_SALARY


async def enter_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    try:
        text=update.message.text.strip().lower()

        if text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data["salary"]=None
            return await save_shift_data(update, context)

        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏/–∑–∞–ø—è—Ç–æ–π
            cleaned_text=re.sub(r'[^\d.,]', '', update.message.text.strip())
            value=float(cleaned_text.replace(",", "."))

            if value<0:
                await update.message.reply_text(
                    f"{EMOJI['warning']} –ì–æ–Ω–æ—Ä–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º."
                )
                return TYPING_SALARY

            context.user_data["salary"]=int(value)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
            return await save_shift_data(update, context)

        except ValueError:
            await update.message.reply_text(
                f"{EMOJI['warning']} –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: 10000 –∏–ª–∏ 7500"
            )
            return TYPING_SALARY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ enter_salary: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—Ä–ø–ª–∞—Ç—ã."
        )
        return TYPING_SALARY


async def save_shift_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id=str(update.effective_user.id)
        shift_data={
            "date": context.user_data.get("date"),
            "role": context.user_data.get("role"),
            "program": context.user_data.get("program"),
            "start_time": context.user_data.get("start_time"),
            "end_time": context.user_data.get("end_time"),
            "salary": context.user_data.get("salary"),
        }

        if db.add_shift(user_id, shift_data):
            await display_shift(update, context, shift_data)
            await cleanup_messages(update, context)

            await update.message.reply_text(
                f"{EMOJI['success']} –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_shift_data: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END


async def display_shift(update: Update, context: ContextTypes.DEFAULT_TYPE, shift: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ–Ω–µ"""
    try:
        await cleanup_messages(update, context)

        formatted_text=format_shift_display(shift)
        if formatted_text:
            await update.message.reply_text(formatted_text)
        else:
            await update.message.reply_text(f"{EMOJI['info']} –°–º–µ–Ω–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ display_shift: {e}")


async def list_shifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
        month_buttons=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data="month_1"),
                InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å", callback_data="month_2"),
                InlineKeyboardButton("–ú–∞—Ä—Ç", callback_data="month_3")
            ],
            [
                InlineKeyboardButton("–ê–ø—Ä–µ–ª—å", callback_data="month_4"),
                InlineKeyboardButton("–ú–∞–π", callback_data="month_5"),
                InlineKeyboardButton("–ò—é–Ω—å", callback_data="month_6")
            ],
            [
                InlineKeyboardButton("–ò—é–ª—å", callback_data="month_7"),
                InlineKeyboardButton("–ê–≤–≥—É—Å—Ç", callback_data="month_8"),
                InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å", callback_data="month_9")
            ],
            [
                InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å", callback_data="month_10"),
                InlineKeyboardButton("–ù–æ—è–±—Ä—å", callback_data="month_11"),
                InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å", callback_data="month_12")
            ],
            [
                InlineKeyboardButton("–í—Å–µ —Å–º–µ–Ω—ã", callback_data="month_all")
            ]
        ])

        await update.message.reply_text(
            f"{EMOJI['date']} –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω:",
            reply_markup=month_buttons
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_shifts: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )


async def show_shifts_by_month(update: Update, context: ContextTypes.DEFAULT_TYPE, month: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–º–µ–Ω—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≤—Å–µ —Å–º–µ–Ω—ã"""
    try:
        query=update.callback_query
        user_id=str(query.from_user.id)
        shifts=db.get_user_shifts(user_id)

        if not shifts:
            await query.edit_message_text(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
                ]])
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –º–µ—Å—è—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if month is not None:
            current_year=datetime.now().year
            filtered_shifts=[]
            for shift in shifts:
                if shift.get("date") and shift["date"].month == month and shift["date"].year == current_year:
                    filtered_shifts.append(shift)
            shifts=filtered_shifts

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—ã: —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É
        if shifts:
            shifts.sort(key=lambda s: (
                s.get("date") or date.min,  # –°–Ω–∞—á–∞–ª–∞ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É)
                s.get("start_time") or "00:00"  # –ü–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω–Ω–µ–µ —Å–≤–µ—Ä—Ö—É)
            ))

        if not shifts:
            month_names={
                1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
                5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
                9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
            }
            month_name=month_names.get(month, "–≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü")

            await query.edit_message_text(
                f"–£ —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω –∑–∞ {month_name}.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
                ]])
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if month is not None:
            month_names={
                1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
                5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
                9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
            }
            header=f"üìÖ –°–º–µ–Ω—ã –∑–∞ {month_names[month]} {datetime.now().year}\n\n"
        else:
            header="üìÖ –í—Å–µ —Ç–≤–æ–∏ —Å–º–µ–Ω—ã:\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        await query.edit_message_text(
            header.strip(),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
            ]])
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ–Ω—ã
        for shift in shifts:
            formatted_text=format_shift_display(shift)

            buttons=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{shift['id']}"),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{shift['id']}")
                ]
            ])

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=formatted_text if formatted_text else "–°–º–µ–Ω–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=buttons
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_shifts_by_month: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–º–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", callback_data="back_to_months")
            ]])
        )


async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id=str(update.effective_user.id)
        shifts=db.get_user_shifts(user_id)

        if not shifts:
            await update.message.reply_text(
                f"{EMOJI['info']} –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        export_data_dict={
            "user_id": user_id,
            "export_date": datetime.now().isoformat(),
            "shifts": []
        }

        for shift in shifts:
            shift_export={
                "date": shift['date'].isoformat() if shift['date'] else None,
                "role": shift['role'],
                "program": shift['program'],
                "start_time": shift['start_time'],
                "end_time": shift['end_time'],
                "salary": shift['salary']
            }
            export_data_dict["shifts"].append(shift_export)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename=f"shifts_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data_dict, f, ensure_ascii=False, indent=2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as f:
            await update.message.reply_document(
                document=f,
                caption=f"{EMOJI['success']} –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö",
                reply_markup=get_main_menu_keyboard()
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_data: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu_keyboard()
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text=f"""
{EMOJI['info']} *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É
‚Ä¢ –ú–æ–∏ —Å–º–µ–Ω—ã - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–º–µ–Ω—ã
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON
‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É:*
1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É
4. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
5. –£–∫–∞–∂–∏—Ç–µ –≥–æ–Ω–æ—Ä–∞—Ä

*–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:*
‚Ä¢ –í—Ä–µ–º—è: 1830 –∏–ª–∏ 18:30
‚Ä¢ –î–∞—Ç–∞: 1503 –¥–ª—è 15.03
‚Ä¢ –ì–æ–Ω–æ—Ä–∞—Ä: 10 –∏–ª–∏ 7.5 (–≤ —Ç—ã—Å—è—á–∞—Ö —Ä—É–±–ª–µ–π)

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏:*
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –ø–æ–ª–µ
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–∏—Ç—å —Å–º–µ–Ω—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç - —Å–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @username
"""

    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
    try:
        query=update.callback_query
        await query.answer()

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")

        user_id=str(query.from_user.id)
        data=query.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
        if data.startswith("month_"):
            if data == "month_all":
                await show_shifts_by_month(update, context, month=None)
            else:
                month=int(data.split("_")[1])
                await show_shifts_by_month(update, context, month=month)
            return

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –º–µ—Å—è—Ü–µ–≤
        elif data == "back_to_months":
            month_buttons=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–Ø–Ω–≤–∞—Ä—å", callback_data="month_1"),
                    InlineKeyboardButton("–§–µ–≤—Ä–∞–ª—å", callback_data="month_2"),
                    InlineKeyboardButton("–ú–∞—Ä—Ç", callback_data="month_3")
                ],
                [
                    InlineKeyboardButton("–ê–ø—Ä–µ–ª—å", callback_data="month_4"),
                    InlineKeyboardButton("–ú–∞–π", callback_data="month_5"),
                    InlineKeyboardButton("–ò—é–Ω—å", callback_data="month_6")
                ],
                [
                    InlineKeyboardButton("–ò—é–ª—å", callback_data="month_7"),
                    InlineKeyboardButton("–ê–≤–≥—É—Å—Ç", callback_data="month_8"),
                    InlineKeyboardButton("–°–µ–Ω—Ç—è–±—Ä—å", callback_data="month_9")
                ],
                [
                    InlineKeyboardButton("–û–∫—Ç—è–±—Ä—å", callback_data="month_10"),
                    InlineKeyboardButton("–ù–æ—è–±—Ä—å", callback_data="month_11"),
                    InlineKeyboardButton("–î–µ–∫–∞–±—Ä—å", callback_data="month_12")
                ],
                [
                    InlineKeyboardButton("–í—Å–µ —Å–º–µ–Ω—ã", callback_data="month_all")
                ]
            ])

            await query.edit_message_text(
                f"{EMOJI['date']} –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω:",
                reply_markup=month_buttons
            )
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã
        elif data.startswith("delete_"):
            shift_id=int(data.split("_")[1])

            if db.delete_shift(user_id, shift_id):
                await query.edit_message_text(f"{EMOJI['success']} –°–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞.")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–º–µ–Ω—É {shift_id}")
            else:
                await query.edit_message_text(f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã.")

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã (–æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        elif re.fullmatch(r"edit_\d+", data):  # –¢–æ–ª—å–∫–æ edit_—á–∏—Å–ª–æ
            shift_id=int(data.split("_")[1])

            shifts=db.get_user_shifts(user_id)
            shift=next((s for s in shifts if s['id'] == shift_id), None)

            if not shift:
                await query.edit_message_text(f"{EMOJI['warning']} –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            edit_buttons=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_field_{shift_id}_date")],
                [InlineKeyboardButton("üõ†Ô∏è –†–æ–ª—å", callback_data=f"edit_field_{shift_id}_role")],
                [InlineKeyboardButton("üì∫ –ü—Ä–æ–≥—Ä–∞–º–º–∞", callback_data=f"edit_field_{shift_id}_program")],
                [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", callback_data=f"edit_field_{shift_id}_start_time")],
                [InlineKeyboardButton("‚è±Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data=f"edit_field_{shift_id}_end_time")],
                [InlineKeyboardButton("üí∞ –ì–æ–Ω–æ—Ä–∞—Ä", callback_data=f"edit_field_{shift_id}_salary")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{shift_id}")]
            ])

            await query.edit_message_text(
                f"–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–º–µ–Ω–µ?\n\n{format_shift_display(shift)}",
                reply_markup=edit_buttons
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è (edit_field_...)
        elif data.startswith("edit_field_"):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ edit_field_: {data}")

            match=re.match(r"edit_field_(\d+)_(\w+)", data)
            if not match:
                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.")
                return

            shift_id=int(match.group(1))
            field=match.group(2)

            logger.debug(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É ID {shift_id}, –ø–æ–ª–µ {field}")

            context.user_data["edit_shift_id"]=shift_id
            context.user_data["edit_field"]=field

            field_names={
                "date": "–¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –î–î–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1503)",
                "role": "—Ä–æ–ª—å",
                "program": "–ø—Ä–æ–≥—Ä–∞–º–º—É",
                "start_time": "–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ß–ß–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1830)",
                "end_time": "–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2100)",
                "salary": "–≥–æ–Ω–æ—Ä–∞—Ä –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 –∏–ª–∏ 7500)"
            }

            await query.edit_message_text(
                f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´{field_names.get(field, field)}¬ª:\n\n"
                f"–í–≤–µ–¥–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ."
            )

        # –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        elif data.startswith("cancel_edit_"):
            shift_id=int(data.split("_")[2])
            shifts=db.get_user_shifts(user_id)
            shift=next((s for s in shifts if s['id'] == shift_id), None)

            if shift:
                await query.edit_message_text(format_shift_display(shift))
            else:
                await query.edit_message_text("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text(f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏.")


async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        if "edit_shift_id" not in context.user_data or "edit_field" not in context.user_data:
            return

        shift_id=context.user_data["edit_shift_id"]
        field=context.user_data["edit_field"]
        user_id=str(update.effective_user.id)
        new_value=update.message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if field == "date":
            if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                processed_value=None
            else:
                try:
                    cleaned=re.sub(r"[^\d]", "", new_value)
                    if len(cleaned) == 4:
                        day, month=int(cleaned[:2]), int(cleaned[2:])
                        processed_value=date(datetime.now().year, month, day)

                        if not validate_date(processed_value):
                            await update.message.reply_text(
                                f"{EMOJI['warning']} –î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –±—É–¥—É—â–µ–º."
                            )
                            return
                    else:
                        await update.message.reply_text(
                            f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1503)."
                        )
                        return
                except ValueError:
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞."
                    )
                    return

        elif field in ["start_time", "end_time"]:
            if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                processed_value=None
            else:
                processed_value=clean_time_input(new_value)
                if processed_value and not validate_time(processed_value):
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß–ú–ú –∏–ª–∏ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1830)."
                    )
                    return

        elif field == "salary":
            if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                processed_value=None
            else:
                try:
                    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏/–∑–∞–ø—è—Ç–æ–π
                    cleaned_text=re.sub(r'[^\d.,]', '', new_value)
                    value=float(cleaned_text.replace(",", "."))
                    if value<0:
                        await update.message.reply_text(
                            f"{EMOJI['warning']} –ì–æ–Ω–æ—Ä–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º."
                        )
                        return
                    processed_value=int(value)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
                except ValueError:
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000 –∏–ª–∏ 7500)."
                    )
                    return

        else:  # role, program
            processed_value=None if new_value.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else new_value

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if db.update_shift(user_id, shift_id, field, processed_value):
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
            shifts=db.get_user_shifts(user_id)
            updated_shift=next((s for s in shifts if s['id'] == shift_id), None)

            if updated_shift:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                formatted_text=format_shift_display(updated_shift)

                edit_buttons=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –µ—â–µ", callback_data=f"edit_{shift_id}"),
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{shift_id}")
                    ]
                ])

                await update.message.reply_text(
                    f"{EMOJI['success']} –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{formatted_text}",
                    reply_markup=edit_buttons
                )
            else:
                await update.message.reply_text(
                    f"{EMOJI['success']} –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await update.message.reply_text(
                f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.",
                reply_markup=get_main_menu_keyboard()
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop("edit_shift_id", None)
        context.user_data.pop("edit_field", None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_input: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        await cleanup_messages(update, context)
        await update.message.reply_text(
            f"{EMOJI['cancel']} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        return ConversationHandler.END


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        text=update.message.text

        if text == "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É":
            return await start_shift_creation(update, context)
        elif text == "–ú–æ–∏ —Å–º–µ–Ω—ã":
            await list_shifts(update, context)
        elif text == "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö":
            await export_data(update, context)
        elif text == "–ü–æ–º–æ—â—å":
            await help_command(update, context)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if "edit_shift_id" in context.user_data and "edit_field" in context.user_data:
                await handle_edit_input(update, context)
            else:
                await update.message.reply_text(
                    f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                    reply_markup=get_main_menu_keyboard()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_buttons: {e}")
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

    if update and update.effective_message:
        await update.effective_message.reply_text(
            f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application=ApplicationBuilder().token(TELEGRAM_TOKEN).build()

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã
        conv_handler=ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex(r'^–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É'), start_shift_creation)
            ],
            states={
                SELECT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_date)],
                SELECT_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_role)],
                SELECT_PROGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_program)],
                TYPING_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_input)],
                TYPING_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_input)],
                TYPING_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_salary)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫ –æ–±—â–∏–º)

        # 1. –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel))

        # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
        application.add_handler(conv_handler)

        # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))

        # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_menu_buttons
        ))

        # 5. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        print(f"{EMOJI['success']} –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"{EMOJI['warning']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == "__main__":
    main()