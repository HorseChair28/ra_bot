# run.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import subprocess
import sys
import os
import time
import signal
from threading import Thread, Event
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger=logging.getLogger('main')


class ShiftTrackerRunner:
    def __init__(self):
        self.processes=[]
        self.shutdown_event=Event()

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            process=subprocess.Popen(
                [sys.executable, "bot.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )
            self.processes.append(('bot', process))

            # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ —á—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            while not self.shutdown_event.is_set():
                if process.poll() is not None:
                    logger.warning("ü§ñ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    break

                try:
                    line=process.stdout.readline()
                    if line:
                        logger.info(f"[BOT] {line.strip()}")
                except:
                    break
                time.sleep(0.1)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

    def start_web(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            process=subprocess.Popen(
                [sys.executable, "app.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )
            self.processes.append(('web', process))

            # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ —á—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            while not self.shutdown_event.is_set():
                if process.poll() is not None:
                    logger.warning("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    break

                try:
                    line=process.stdout.readline()
                    if line:
                        logger.info(f"[WEB] {line.strip()}")
                except:
                    break
                time.sleep(0.1)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
        self.shutdown_event.set()
        self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

        for name, process in self.processes:
            if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                logger.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {name} (PID: {process.pid})")

                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                process.terminate()

                try:
                    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    process.wait(timeout=5)
                    logger.info(f"‚úÖ {name} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                except subprocess.TimeoutExpired:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - —É–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    logger.warning(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º {name}")
                    process.kill()
                    process.wait()

        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(0)

    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        while not self.shutdown_event.is_set():
            dead_processes=[]
            for name, process in self.processes:
                if process.poll() is not None:
                    dead_processes.append((name, process))

            if dead_processes:
                for name, process in dead_processes:
                    logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
                    self.processes.remove((name, process))

                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–ø–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è
                if not self.processes:
                    logger.error("üí• –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É")
                    self.shutdown_event.set()
                    break

            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

        logger.info("=" * 50)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –£–ß–ï–¢–ê –°–ú–ï–ù")
        logger.info("=" * 50)

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ (–ù–ï daemon!)
        bot_thread=Thread(target=self.start_bot, name='BotThread')
        web_thread=Thread(target=self.start_web, name='WebThread')
        monitor_thread=Thread(target=self.monitor_processes, name='MonitorThread')

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        bot_thread.start()
        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        web_thread.start()
        monitor_thread.start()

        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("üì± Telegram –±–æ—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ SIGTERM –∏–ª–∏ SIGINT")

        try:
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while not self.shutdown_event.is_set():
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C")
            self.signal_handler(signal.SIGINT, None)
        finally:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if not self.shutdown_event.is_set():
                self.stop()


if __name__ == "__main__":
    runner=ShiftTrackerRunner()
    runner.run()