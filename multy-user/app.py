from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from datetime import datetime
import traceback
import sqlite3
import os

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, 'shifts.db')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ db.py)
def get_all_shifts():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.execute('''
        SELECT * FROM shifts 
        ORDER BY date DESC, start_time DESC
    ''')
    shifts = [dict(row) for row in cursor.fetchall()]
    conn.close()
    return shifts

def get_statistics():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.execute('''
        SELECT COUNT(*) as total, SUM(salary) as total_salary 
        FROM shifts
    ''')
    stats = dict(cursor.fetchone())
    conn.close()
    return stats

def update_shift(user_id, shift_id, field, value):
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.execute(f'''
            UPDATE shifts SET {field} = ? 
            WHERE id = ? AND user_id = ?
        ''', (value, shift_id, user_id))
        conn.commit()
        affected = conn.total_changes
        conn.close()
        return affected > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

def delete_shift(user_id, shift_id):
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.execute('''
            DELETE FROM shifts 
            WHERE id = ? AND user_id = ?
        ''', (shift_id, user_id))
        conn.commit()
        affected = conn.total_changes
        conn.close()
        return affected > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return False


app=Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è API


@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return render_template("index.html")


@app.route("/api/shifts")
def api_shifts():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω"""
    try:
        print("[DEBUG] API /api/shifts –≤—ã–∑–≤–∞–Ω")
        month=request.args.get("month", type=int)
        user_id=request.args.get("user_id")

        shifts=get_all_shifts()
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–º–µ–Ω: {len(shifts)}")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É
        if month:
            shifts=[s for s in shifts if s.get("date") and
                    datetime.fromisoformat(s["date"]).month == month]

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id:
            shifts=[s for s in shifts if s.get("user_id") == user_id]

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º date –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        for shift in shifts:
            if shift.get('date') and hasattr(shift['date'], 'isoformat'):
                shift['date']=shift['date'].isoformat()

        return jsonify(shifts)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ API: {e}")
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


@app.route("/api/shifts/<int:shift_id>", methods=['PUT'])
def api_update_shift(shift_id):
    """API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    try:
        print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã ID {shift_id}")
        data=request.get_json()

        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        user_id=data.get('user_id')
        if not user_id:
            return jsonify({"error": "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        updated_fields=[]

        for field in ['date', 'role', 'program', 'start_time', 'end_time', 'salary']:
            if field in data:
                value=data[field]

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if value == '' or value == 'null':
                    value=None

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
                if field == 'date' and value:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                        parsed_date=datetime.fromisoformat(value)
                        print(f"[DEBUG] –î–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞: {value} -> {parsed_date}")
                    except ValueError as e:
                        print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {value}, –æ—à–∏–±–∫–∞: {e}")
                        return jsonify({"error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {value}"}), 400

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
                if field in ['start_time', 'end_time'] and value:
                    try:
                        datetime.strptime(value, '%H:%M')
                    except ValueError:
                        return jsonify({"error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {value}"}), 400

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
                if field == 'salary' and value is not None:
                    try:
                        value=int(value)
                        if value<0:
                            return jsonify({"error": "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"}), 400
                    except (ValueError, TypeError):
                        return jsonify({"error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã: {value}"}), 400

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ
                print(f"[DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ {field} = {value} (—Ç–∏–ø: {type(value)})")
                if update_shift(user_id, shift_id, field, value):
                    updated_fields.append(field)
                    print(f"[DEBUG] –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ {field}")
                else:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è {field}")
                    return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è {field}"}), 500

        if updated_fields:
            print(f"[SUCCESS] –°–º–µ–Ω–∞ {shift_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—è: {updated_fields}")
            return jsonify({
                "success": True,
                "message": f"–°–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                "updated_fields": updated_fields
            })
        else:
            return jsonify({"success": True, "message": "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"})

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


@app.route("/api/shifts/<int:shift_id>", methods=['DELETE'])
def api_delete_shift(shift_id):
    """API endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    try:
        print(f"[DEBUG] –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã ID {shift_id}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ user_id –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å—Å—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        # –ü–æ–∫–∞ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        user_id=request.args.get('user_id')
        if not user_id:
            return jsonify({"error": "user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

        if delete_shift(user_id, shift_id):
            print(f"[SUCCESS] –°–º–µ–Ω–∞ {shift_id} —É–¥–∞–ª–µ–Ω–∞")
            return jsonify({"success": True, "message": "–°–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞"})
        else:
            print(f"[ERROR] –°–º–µ–Ω–∞ {shift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            return jsonify({"error": "–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏–µ"}), 404

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


@app.route("/api/statistics")
def api_statistics():
    """API endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats=get_statistics()
        return jsonify(stats)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")
        return jsonify({"error": str(e)}), 500


@app.route("/health")
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    try:
        shifts_count=len(get_all_shifts())
        return jsonify({
            "status": "healthy",
            "shifts_count": shifts_count,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({"status": "unhealthy", "error": str(e)}), 500


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
    print("üì° API: http://localhost:8000/api/shifts")
    print("üìù –ù–æ–≤—ã–µ endpoints:")
    print("   PUT /api/shifts/<id> - –æ–±–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É")
    print("   DELETE /api/shifts/<id> - —É–¥–∞–ª–∏—Ç—å —Å–º–µ–Ω—É")
    app.run(debug=True, host='0.0.0.0', port=8000)